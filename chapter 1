// LL creation, Insert_at_head, Insert_at_Tail, InsertATPosition, Deletion -> head, tail, any position 


#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
    
    Node(){
        this->data = 0;
        this->next = NULL;
    }
    Node(int data){
        this->data = data;
        this->next = NULL;
    }
    //write a destructor to delete node
    ~Node(){
        cout << "Node with data " << this->data << " deleted." << endl;
    }
};
int findLength(Node* head) {
    int len = 0;
    Node* temp = head;
    while (temp != NULL) {
        len++;
        temp = temp->next;
    }
    return len;
}
void print(Node* head){
    Node* temp= head;
    while(temp != NULL){
        cout<<temp->data<< " ";
        temp = temp->next;
    }
}
void insertAtHead( Node* &head, int data){
    //step 1 node create krna 
    Node* newNode = new Node(data);
    //step2 new node k next me head ka address
    newNode->next = head;
    //step 3 naye node ko head bna do
    head = newNode;
}
void insertAtTail(Node* &head, int data){
        //step 1 new node bnao
    Node* newNode = new Node(data);
    //step  2 copy bnao head ki 
    Node* temp = head;
    //step 3 check kro head null to nhi 
    if(head == NULL){
        head = newNode;
        newNode->next = NULL;
    }
    //step 4 tail tk aao traverse krke 
    while(temp->next != NULL){
        temp = temp->next;
    }
    //step 5 Tail me insert kro 
    temp->next = newNode;
    // step 6 newNode k next me null dalo 
    newNode->next = NULL;
}
void insertAtMid(int position ,Node* &head, int data){
    if(head == NULL){
        Node* newNode = new Node(data);
        newNode->next= NULL;
        head = newNode;
    }
    //step 1 position find kro prev & curr
    int i = 0;
    Node* prev = head;
    
    while(i< position){
        prev = prev->next;
        i++;
    }
    Node* curr = prev->next;
    
    //step2 create new Node
    Node* newNode = new Node(data);
    // step 3 phle newNode k next me curr k pointer dalo 
    newNode->next = curr;
    //step 4 prev k next me newNode dalo
    prev->next = newNode; 
    
}
void deleteAtFirst(Node* &head){
    if(head == NULL) {
        cout<<"Nothing  to dell";
        return;
    }
    Node* temp = head;
    head = temp->next;
    temp->next = NULL;
    delete temp;
}
void deleteATLast(Node* &head){
    if(head == NULL) {
        cout<<"Nothing  to dell";
        return;
    }
    //tail tk aao and prev store kro
    if(head->next == NULL){
        delete head;
        head = NULL;
        return;
    }
    Node* prev = NULL;
    Node* curr = head;
  
     // Traverse until 'curr' is the last node
    while(curr->next != NULL){
        prev = curr;
        curr = curr->next;
    }
    prev->next = NULL;
    delete curr;

}
void deleteNode(int position,Node* &head ){
    //list is empty 
    if(head == NULL){
        cout<<"Nthg to delete";
        return;
    }
    // head delete krna ho .. make sure head->next new head bnega .. delete at fist wala logic lagega
    if(position == 1){
      deleteAtFirst(head); // Reuse existing function
        return;
    }
    // delete in middle or tail
    Node* prev = head;
    int count = 1;
    
    while(count < position-1){
        if(prev->next == NULL){
            cout<<"error in position"<<endl;
            return;
        }
        prev = prev->next;
        count++;
    }
       // Step 2: Identify the node to be deleted (curr)
    Node* curr = prev->next;
    
    // Check if the position is out of bounds
    if (curr == NULL) {
        cout << "Error: Position " << position << " is out of bounds." << endl;
        return;
    }

    // Step 3: Link 'prev' to 'curr->next' (bypassing 'curr')
    prev->next = curr->next;
    
    // Step 4: Clean up 'curr'
    curr->next = NULL; // Disconnect
    delete curr; 
   
}

int main() {

    Node* first = new Node(10);
    Node* second = new Node(20);
    Node* third = new Node(30);
    Node* fourth = new Node(40);
    Node* fifth = new Node(50); 
    
    first->next = second;
    second->next = third;
    third->next = fourth;
    fourth->next = fifth;
    fifth->next = NULL;
    
    insertAtHead(first,90);
    insertAtTail(first, 100);
    insertAtMid(3, first, 300);
    deleteATLast(first);
    deleteAtFirst(first);
    deleteNode(3, first);

    
    cout<<"printing the LL"<< endl;
    print(first);
    
    return 0;
}
